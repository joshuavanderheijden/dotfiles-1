#!/bin/bash

BACKUP_DIRECTORY=$HOME/.dotfiles_backup
PWD="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

###
### Function to expand the tilde to the home directory
###
expand_tilde() {
    tilde_less="${1#\~/}"
    [ "$1" != "$tilde_less" ] && tilde_less="$HOME/$tilde_less"
    printf "$tilde_less"
}

###
### Process function Process function
###
process_dotfile() {
    dotfile=$(expand_tilde $1)

    # Only check existing files/folders
    [[ ( ! -f $dotfile ) && ( ! -d $dotfile ) ]] && return

    # Check for symlink
    if [ -L $dotfile ]
    then
        link_target=$(readlink $dotfile)

        if [[ $link_target =~ $PWD ]] ; then
            echo " => Linked to dotfiles folder, removing link"
            unlink $dotfile
        else
            echo -e "\e[31m => Does not link to dotfiles folder. Links to $link_target\e[0m"
        fi

    # No symlink found, move to backup
    else
        echo " => Regular file, moving to backup"
        mv $dotfile $BACKUP_DIRECTORY/$(basename $dotfile)
    fi
}

###
### Main script
###
echo
echo -e "\e[33mCleaning dotfiles:\e[0m"
echo

mkdir -p $BACKUP_DIRECTORY

pushd $PWD > /dev/null

YAML_FILES=$(find . -maxdepth 1 -iname "*.conf.yaml")
for file in $YAML_FILES
do
    echo -e "\e[32mProcessing config file: $file\e[0m"
    start_processing=false

    while read line ; do
        if [[ $line =~ ^\ *$ ]] ; then
            start_processing=false
        fi

        if [ "$start_processing" = true ] ; then
            dotfile=$(echo $line | awk -F':' '{ print $1 }' | tr -d "[[:space:]]")

            echo "$dotfile: Checking for dotfile"

            process_dotfile $dotfile
        fi

        if [[ $line =~ "- link:" ]] ; then
            start_processing=true
        fi
    done < $file

    echo
done

if [ -z "$(ls -A $BACKUP_DIRECTORY)" ]
then
    echo "Backup directory empty, removing folder"
    rm -rf $BACKUP_DIRECTORY
    echo
fi

popd > /dev/null

