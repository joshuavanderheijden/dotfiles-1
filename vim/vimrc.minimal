""" MISC EDITOR BEHAVIOR {{{

" Enable filetype plugins
filetype plugin indent on

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Enable syntax highlighting
syntax enable

" Set to auto read when a file is changed from the outside
set autoread

" Allow buffers to exist in the background
set hidden

" Recognize numbered lists
set formatoptions+=n
" Delete comment character when joining lines
set formatoptions+=j

" Change the timeout timings when matching to mappings / keys
set timeoutlen=300
set ttimeoutlen=10

" Use Matchit.vim
runtime macros/matchit.vim

" Update the path to provide search in subfolders
set path+=**
set path+=/usr/include

""" END MISC EDITOR BEHAVIOR }}}
""" TEMP FILES BEHAVIOR {{{

if has("persistent_undo")
    set undofile
    set undodir=~/.vim/undodir
endif

""" END TEMP FILES BEHAVIOR }}}
""" COLORS BEHAVIOR {{{

" Fix the colorscheme as soon as the plugins have been installed by plug.vim (prevents warning at first startup)
set background=dark

silent! colorscheme elflord
silent! colorscheme apprentice
silent! colorscheme gruvbox

""" END COLORS BEHAVIOR }}}
""" STATUSLINE BEHAVIOR {{{

" Show the statusline at all times
set laststatus=2

"set statusline=\ %f\ %y\ %m\ %h\ %r\ %{winnr()}\%=L:\ %l/%L\ C:\ %v
" Define statusline items
set statusline=
" Filename
set statusline+=%f
" File type, Window Type (help, preview, qlist)
set statusline+=\ [%Y%H]
" Modified flag
set statusline+=\ %m
" Midline separator
set statusline+=%=
" Line indicator
set statusline+=L:\ %3l\ /\ %3L
" Column indicator
set statusline+=\ \ C:\ %4v

" Define statusline
" set statusline=
" Filename
" set statusline+=%*%f
" Window type (help, preview, qlist)
" set statusline+=%*%(%h%w%)
" Modified flag
" set statusline+=%3*%(%m%)
" Readonly flag
" set statusline+=%1*%(%r%)
" Midline separator
" set statusline+=%=

"hi ModeMsg ctermfg=31 ctermbg=none
"
""" END STATUSLINE BEHAVIOR }}}
""" INDENT BEHAVIOR {{{

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" Round indent to multiple of 'shiftwidth'.
set shiftround

" Set up indents to use 4 spaces
set shiftwidth=4
set softtabstop=-1

" Make tab characters display as 8 characters wide
set tabstop=8

" Automatically indent when opening a new line
set autoindent

""" END INDENT BEHAVIOR }}}
""" SEARCH BEHAVIOR {{{

" Show search results as we type
set incsearch

" Highlight search results
set hlsearch

" Ignore case when searching
set ignorecase

" Don't ignore case if we have a capital letter
set smartcase

""" END SEARCH BEHAVIOR }}}
""" INSERT MODE BEHAVIOR {{{

" Configure backspace so it acts as it should act
set backspace=indent,eol,start

""" END INSERT MODE BEHAVIOR }}}
""" NORMAL MODE BEHAVIOR {{{

" Treat long lines as break lines (useful when moving around in them)
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')
noremap <silent> $ g$
" Remap VIM 0 to first non-blank character
noremap <silent> 0 g^

" Navigate the vim splits with shortcuts
if empty(glob("~/.vim/plugged/vim-tmux-navigator/"))
    nnoremap <c-j> <c-w>j
    nnoremap <c-k> <c-w>k
    nnoremap <c-h> <c-w>h
    nnoremap <c-l> <c-w>l
endif

" Map Y to y$, to be similar to D and C
nnoremap Y y$

""" END NORMAL MODE BEHAVIOR }}}
""" VISUAL MODE BEHAVIOR {{{

" Reselect visual block after indent/outdent: http://vimbits.com/bits/20
vnoremap < <gv
vnoremap > >gv
vnoremap = =gv

" Set 3 lines to the cursor - when moving vertically using j/k 
set scrolloff=3

" Highlight the current line
set cursorline

augroup HighlightFollowsFocus
    autocmd!
    autocmd WinEnter,FocusGained * set cursorline
    autocmd WinLeave,FocusLost * set nocursorline
augroup END

" Show (relative) line numbers
set number
if exists("&relativenumber")
    set relativenumber
endif

augroup SmartNumbers
    autocmd!
     if exists("&relativenumber")
         autocmd WinEnter,FocusGained * setlocal number relativenumber
         autocmd WinLeave,FocusLost * setlocal number norelativenumber
     endif
augroup END

" Show a line break character
set showbreak=↪\ 

" Highlight tabs and trailing spaces
set listchars=tab:»\ ,trail:•

" Make whitespace characters visible
set list

""" END VISUAL BEHAVIOR }}}
""" FOLD BEHAVIOR {{{

" Fold by markers
set foldmethod=marker

" Open folds on jumps
set foldopen+=jump

""" END FOLD BEHAVIOR }}}
""" WINDOW BEHAVIOR {{{

" Open new splits below
set splitbelow

" Open new vertical splits to the right
set splitright

""" END WINDOW BEHAVIOR }}}
""" COMMAND LINE BEHAVIOR {{{

set wildmenu

" Complete till longest string and list all matches
set wildmode=longest,list

if exists("&wildignorecase")
    set wildignorecase
endif

if &history < 1000
    set history=1000
endif

" Command line mapping to write with root permissions
cmap w!! w !sudo tee > /dev/null %

" Command line expansion for the current working directory
cabbr <expr> %% expand('%:p:h')

""" END COMMAND LINE BEHAVIOR }}}
""" LEADER KEY BEHAVIOR {{{

" Change the leader key to comma (,)
let mapleader = ","

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
function! StripTrailingWhitespaces()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

" Leader key mappnigs
nnoremap          <leader>b       :b <C-d>
nnoremap <silent> <leader>c       :bd<cr>
nnoremap          <leader>e       :e **/*
nnoremap          <leader>f       :find *
nnoremap <silent> <leader>m       :make<cr>
nnoremap <silent> <leader>q       :quit<cr>
nnoremap          <leader>s       :sfind *
nnoremap          <leader>t       :tjump /
nmap     <silent> <leader>T       :call StripTrailingWhitespaces()<CR>:retab<CR>
nnoremap          <leader>v       :vert sfind *
nnoremap <silent> <leader>z       :b#<cr>
nnoremap          <leader>/       :grep<space>
nnoremap <silent> <leader><space> :nohlsearch<cr>

""" END LEADER KEY BEHAVIOR }}}
""" GREP AND VIMGREP BEHAVIOR {{{

" Check for file_in_path error, due to incompatibility with Vim <7.3
if executable('ag')
    set grepprg=ag\ --vimgrep\ $*
    set grepformat=%f:%l:%c:%m
elseif executable('ack')
    set grepprg=ack\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow\ $*
    set grepformat=%f:%l:%c:%m
endif

nnoremap <silent> K :grep! "\b<c-r><c-w>\b"<cr>:cwindow<cr>

""" END GREP AND VIMGREP BEHAVIOR }}}
""" BUFFER SPECIFIC BEHAVIOR {{{

" Automatically enable spell
augroup FileTypeSpell
    autocmd!
    if has("spell")
        autocmd Filetype markdown,gitcommit,todo setlocal spell
    endif
augroup END

augroup AdditionalFileTypesCommands
    autocmd!
    autocmd BufRead,BufNewFile *.md,*.markdown set filetype=markdown
    autocmd BufRead,BufNewFile Jenkinsfile* set filetype=groovy

    autocmd BufWrite *.py :call StripTrailingWhitespaces()
    autocmd BufWrite *.coffee :call StripTrailingWhitespaces()

    autocmd Filetype c,cpp,cs,java  setlocal commentstring=//\ %s

    autocmd FileType qf setlocal nowrap
augroup END


" Return to last edit position when opening files
augroup LastBufferPosition
    autocmd!
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
augroup END

" Automatically open cwindow or lwindow on :grep / :make / :lvimgrep / etc.
augroup AutomaticQuickFix
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd QuickFixCmdPost    l* lwindow
augroup END

""" END BUFFER SPECIFIC BEHAVIOR }}}
""" CODE COMPLETION BEHAVIOR {{{

" Enable omni completion by using <C-X><C-O> in insert mode
set omnifunc=syntaxcomplete#Complete

""" END CODE COMPLETION BEHAVIOR }}}
""" C++ SPECIFIC BEHAVIOR {{{

" Fix C indentation and make sure access specifiers are without indentation
set cindent

" Do not indent C++ scope declarations (public/private/protected) within classes
set cinoptions+=g0
" Do not indent after a namespace block
set cinoptions+=N-s

""" END C++ SPECIFIC BEHAVIOR }}}
""" LOCAL VIMRC INCLUDE {{{

if filereadable(glob("$HOME/.vimrc.local"))
    source $HOME/.vimrc.local
endif

""" END LOCAL VIMRC INCLUDE }}}
